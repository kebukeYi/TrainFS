// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.0
// source: model.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkReplicateStatus int32

const (
	ChunkReplicateStatus_LostToReplicate   ChunkReplicateStatus = 0
	ChunkReplicateStatus_NormalToReplicate ChunkReplicateStatus = 1
)

// Enum value maps for ChunkReplicateStatus.
var (
	ChunkReplicateStatus_name = map[int32]string{
		0: "LostToReplicate",
		1: "NormalToReplicate",
	}
	ChunkReplicateStatus_value = map[string]int32{
		"LostToReplicate":   0,
		"NormalToReplicate": 1,
	}
)

func (x ChunkReplicateStatus) Enum() *ChunkReplicateStatus {
	p := new(ChunkReplicateStatus)
	*p = x
	return p
}

func (x ChunkReplicateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkReplicateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[0].Descriptor()
}

func (ChunkReplicateStatus) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[0]
}

func (x ChunkReplicateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkReplicateStatus.Descriptor instead.
func (ChunkReplicateStatus) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0}
}

type FileOperationArg_Operation int32

const (
	FileOperationArg_MKDIR   FileOperationArg_Operation = 0
	FileOperationArg_DELETE  FileOperationArg_Operation = 1
	FileOperationArg_RENAME  FileOperationArg_Operation = 2
	FileOperationArg_READ    FileOperationArg_Operation = 3
	FileOperationArg_WRITE   FileOperationArg_Operation = 4
	FileOperationArg_LISTDIR FileOperationArg_Operation = 5
)

// Enum value maps for FileOperationArg_Operation.
var (
	FileOperationArg_Operation_name = map[int32]string{
		0: "MKDIR",
		1: "DELETE",
		2: "RENAME",
		3: "READ",
		4: "WRITE",
		5: "LISTDIR",
	}
	FileOperationArg_Operation_value = map[string]int32{
		"MKDIR":   0,
		"DELETE":  1,
		"RENAME":  2,
		"READ":    3,
		"WRITE":   4,
		"LISTDIR": 5,
	}
)

func (x FileOperationArg_Operation) Enum() *FileOperationArg_Operation {
	p := new(FileOperationArg_Operation)
	*p = x
	return p
}

func (x FileOperationArg_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileOperationArg_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[1].Descriptor()
}

func (FileOperationArg_Operation) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[1]
}

func (x FileOperationArg_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileOperationArg_Operation.Descriptor instead.
func (FileOperationArg_Operation) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{3, 0}
}

type ChunkReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ChunkReportReply) Reset() {
	*x = ChunkReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkReportReply) ProtoMessage() {}

func (x *ChunkReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkReportReply.ProtoReflect.Descriptor instead.
func (*ChunkReportReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkReportReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChunkReportReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type ReNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ReNameReply) Reset() {
	*x = ReNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReNameReply) ProtoMessage() {}

func (x *ReNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReNameReply.ProtoReflect.Descriptor instead.
func (*ReNameReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{1}
}

func (x *ReNameReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReNameReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type DeleteFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *DeleteFileReply) Reset() {
	*x = DeleteFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileReply) ProtoMessage() {}

func (x *DeleteFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileReply.ProtoReflect.Descriptor instead.
func (*DeleteFileReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteFileReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFileReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type FileOperationArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   FileOperationArg_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=FileOperationArg_Operation" json:"operation,omitempty"`
	FileName    string                     `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	NewFileName string                     `protobuf:"bytes,3,opt,name=newFileName,proto3" json:"newFileName,omitempty"`
	ChunkId     int32                      `protobuf:"varint,4,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ChunkNum    int64                      `protobuf:"varint,5,opt,name=chunkNum,proto3" json:"chunkNum,omitempty"`
	ReplicaNum  int32                      `protobuf:"varint,6,opt,name=replicaNum,proto3" json:"replicaNum,omitempty"`
	FileSize    int64                      `protobuf:"varint,7,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (x *FileOperationArg) Reset() {
	*x = FileOperationArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOperationArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOperationArg) ProtoMessage() {}

func (x *FileOperationArg) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOperationArg.ProtoReflect.Descriptor instead.
func (*FileOperationArg) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{3}
}

func (x *FileOperationArg) GetOperation() FileOperationArg_Operation {
	if x != nil {
		return x.Operation
	}
	return FileOperationArg_MKDIR
}

func (x *FileOperationArg) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileOperationArg) GetNewFileName() string {
	if x != nil {
		return x.NewFileName
	}
	return ""
}

func (x *FileOperationArg) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *FileOperationArg) GetChunkNum() int64 {
	if x != nil {
		return x.ChunkNum
	}
	return 0
}

func (x *FileOperationArg) GetReplicaNum() int32 {
	if x != nil {
		return x.ReplicaNum
	}
	return 0
}

func (x *FileOperationArg) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type CheckCommitChunkArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName        string   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkId         int32    `protobuf:"varint,2,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	DataNodeAddress []string `protobuf:"bytes,3,rep,name=DataNodeAddress,proto3" json:"DataNodeAddress,omitempty"`
}

func (x *CheckCommitChunkArg) Reset() {
	*x = CheckCommitChunkArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitChunkArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitChunkArg) ProtoMessage() {}

func (x *CheckCommitChunkArg) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitChunkArg.ProtoReflect.Descriptor instead.
func (*CheckCommitChunkArg) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{4}
}

func (x *CheckCommitChunkArg) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CheckCommitChunkArg) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *CheckCommitChunkArg) GetDataNodeAddress() []string {
	if x != nil {
		return x.DataNodeAddress
	}
	return nil
}

type CheckCommitChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success             bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context             string   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	FailDataNodeAddress []string `protobuf:"bytes,3,rep,name=failDataNodeAddress,proto3" json:"failDataNodeAddress,omitempty"`
}

func (x *CheckCommitChunkReply) Reset() {
	*x = CheckCommitChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitChunkReply) ProtoMessage() {}

func (x *CheckCommitChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitChunkReply.ProtoReflect.Descriptor instead.
func (*CheckCommitChunkReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{5}
}

func (x *CheckCommitChunkReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckCommitChunkReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CheckCommitChunkReply) GetFailDataNodeAddress() []string {
	if x != nil {
		return x.FailDataNodeAddress
	}
	return nil
}

type CommitChunkArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePathName    string               `protobuf:"bytes,1,opt,name=filePathName,proto3" json:"filePathName,omitempty"`
	FileChunkName   string               `protobuf:"bytes,2,opt,name=fileChunkName,proto3" json:"fileChunkName,omitempty"`
	Operation       ChunkReplicateStatus `protobuf:"varint,3,opt,name=operation,proto3,enum=ChunkReplicateStatus" json:"operation,omitempty"`
	FileSize        int64                `protobuf:"varint,4,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ChunkId         int32                `protobuf:"varint,5,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	DataNodeAddress []string             `protobuf:"bytes,6,rep,name=DataNodeAddress,proto3" json:"DataNodeAddress,omitempty"`
}

func (x *CommitChunkArg) Reset() {
	*x = CommitChunkArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitChunkArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitChunkArg) ProtoMessage() {}

func (x *CommitChunkArg) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitChunkArg.ProtoReflect.Descriptor instead.
func (*CommitChunkArg) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{6}
}

func (x *CommitChunkArg) GetFilePathName() string {
	if x != nil {
		return x.FilePathName
	}
	return ""
}

func (x *CommitChunkArg) GetFileChunkName() string {
	if x != nil {
		return x.FileChunkName
	}
	return ""
}

func (x *CommitChunkArg) GetOperation() ChunkReplicateStatus {
	if x != nil {
		return x.Operation
	}
	return ChunkReplicateStatus_LostToReplicate
}

func (x *CommitChunkArg) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *CommitChunkArg) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *CommitChunkArg) GetDataNodeAddress() []string {
	if x != nil {
		return x.DataNodeAddress
	}
	return nil
}

type CommitChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success             bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context             string   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	FailDataNodeAddress []string `protobuf:"bytes,3,rep,name=failDataNodeAddress,proto3" json:"failDataNodeAddress,omitempty"`
}

func (x *CommitChunkReply) Reset() {
	*x = CommitChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitChunkReply) ProtoMessage() {}

func (x *CommitChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitChunkReply.ProtoReflect.Descriptor instead.
func (*CommitChunkReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{7}
}

func (x *CommitChunkReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommitChunkReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CommitChunkReply) GetFailDataNodeAddress() []string {
	if x != nil {
		return x.FailDataNodeAddress
	}
	return nil
}

type ConfirmFileArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName         string            `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileLocationInfo *FileLocationInfo `protobuf:"bytes,2,opt,name=fileLocationInfo,proto3" json:"fileLocationInfo,omitempty"`
	Ack              bool              `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *ConfirmFileArg) Reset() {
	*x = ConfirmFileArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmFileArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmFileArg) ProtoMessage() {}

func (x *ConfirmFileArg) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmFileArg.ProtoReflect.Descriptor instead.
func (*ConfirmFileArg) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{8}
}

func (x *ConfirmFileArg) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ConfirmFileArg) GetFileLocationInfo() *FileLocationInfo {
	if x != nil {
		return x.FileLocationInfo
	}
	return nil
}

func (x *ConfirmFileArg) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type ConfirmFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ConfirmFileReply) Reset() {
	*x = ConfirmFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmFileReply) ProtoMessage() {}

func (x *ConfirmFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmFileReply.ProtoReflect.Descriptor instead.
func (*ConfirmFileReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{9}
}

func (x *ConfirmFileReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfirmFileReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type FileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyFileName string `protobuf:"bytes,1,opt,name=KeyFileName,proto3" json:"KeyFileName,omitempty"`
	FileName    string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize    int64  `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	IsDir       bool   `protobuf:"varint,4,opt,name=isDir,proto3" json:"isDir,omitempty"`
}

func (x *FileMeta) Reset() {
	*x = FileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMeta) ProtoMessage() {}

func (x *FileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMeta.ProtoReflect.Descriptor instead.
func (*FileMeta) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{10}
}

func (x *FileMeta) GetKeyFileName() string {
	if x != nil {
		return x.KeyFileName
	}
	return ""
}

func (x *FileMeta) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileMeta) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileMeta) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

type DirMetaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaList []*FileMeta `protobuf:"bytes,1,rep,name=metaList,proto3" json:"metaList,omitempty"`
}

func (x *DirMetaList) Reset() {
	*x = DirMetaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirMetaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirMetaList) ProtoMessage() {}

func (x *DirMetaList) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirMetaList.ProtoReflect.Descriptor instead.
func (*DirMetaList) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{11}
}

func (x *DirMetaList) GetMetaList() []*FileMeta {
	if x != nil {
		return x.MetaList
	}
	return nil
}

type FileLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize        int64        `protobuf:"varint,1,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ChunkNum        int64        `protobuf:"varint,2,opt,name=chunkNum,proto3" json:"chunkNum,omitempty"`
	DataNodeAddress string       `protobuf:"bytes,3,opt,name=dataNodeAddress,proto3" json:"dataNodeAddress,omitempty"`
	Chunks          []*ChunkInfo `protobuf:"bytes,4,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *FileLocationInfo) Reset() {
	*x = FileLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocationInfo) ProtoMessage() {}

func (x *FileLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocationInfo.ProtoReflect.Descriptor instead.
func (*FileLocationInfo) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{12}
}

func (x *FileLocationInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileLocationInfo) GetChunkNum() int64 {
	if x != nil {
		return x.ChunkNum
	}
	return 0
}

func (x *FileLocationInfo) GetDataNodeAddress() string {
	if x != nil {
		return x.DataNodeAddress
	}
	return ""
}

func (x *FileLocationInfo) GetChunks() []*ChunkInfo {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type ChunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId           int32          `protobuf:"varint,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	FilePathName      string         `protobuf:"bytes,2,opt,name=filePathName,proto3" json:"filePathName,omitempty"`
	FilePathChunkName string         `protobuf:"bytes,3,opt,name=filePathChunkName,proto3" json:"filePathChunkName,omitempty"`
	DataNodeAddress   *DataNodeChain `protobuf:"bytes,4,opt,name=dataNodeAddress,proto3" json:"dataNodeAddress,omitempty"`
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{13}
}

func (x *ChunkInfo) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *ChunkInfo) GetFilePathName() string {
	if x != nil {
		return x.FilePathName
	}
	return ""
}

func (x *ChunkInfo) GetFilePathChunkName() string {
	if x != nil {
		return x.FilePathChunkName
	}
	return ""
}

func (x *ChunkInfo) GetDataNodeAddress() *DataNodeChain {
	if x != nil {
		return x.DataNodeAddress
	}
	return nil
}

type DataNodeChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataNodeAddress []string `protobuf:"bytes,1,rep,name=dataNodeAddress,proto3" json:"dataNodeAddress,omitempty"`
}

func (x *DataNodeChain) Reset() {
	*x = DataNodeChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNodeChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeChain) ProtoMessage() {}

func (x *DataNodeChain) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeChain.ProtoReflect.Descriptor instead.
func (*DataNodeChain) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{14}
}

func (x *DataNodeChain) GetDataNodeAddress() []string {
	if x != nil {
		return x.DataNodeAddress
	}
	return nil
}

type FileDataStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation         ChunkReplicateStatus `protobuf:"varint,1,opt,name=operation,proto3,enum=ChunkReplicateStatus" json:"operation,omitempty"`
	Data              []byte               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	FilePathName      string               `protobuf:"bytes,3,opt,name=filePathName,proto3" json:"filePathName,omitempty"`
	FilePathChunkName string               `protobuf:"bytes,4,opt,name=filePathChunkName,proto3" json:"filePathChunkName,omitempty"`
	Address           string               `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	SrcName           string               `protobuf:"bytes,6,opt,name=srcName,proto3" json:"srcName,omitempty"`
	ChunkId           int32                `protobuf:"varint,7,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	DataNodeChain     []string             `protobuf:"bytes,8,rep,name=dataNodeChain,proto3" json:"dataNodeChain,omitempty"`
}

func (x *FileDataStream) Reset() {
	*x = FileDataStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDataStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDataStream) ProtoMessage() {}

func (x *FileDataStream) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDataStream.ProtoReflect.Descriptor instead.
func (*FileDataStream) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{15}
}

func (x *FileDataStream) GetOperation() ChunkReplicateStatus {
	if x != nil {
		return x.Operation
	}
	return ChunkReplicateStatus_LostToReplicate
}

func (x *FileDataStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileDataStream) GetFilePathName() string {
	if x != nil {
		return x.FilePathName
	}
	return ""
}

func (x *FileDataStream) GetFilePathChunkName() string {
	if x != nil {
		return x.FilePathChunkName
	}
	return ""
}

func (x *FileDataStream) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FileDataStream) GetSrcName() string {
	if x != nil {
		return x.SrcName
	}
	return ""
}

func (x *FileDataStream) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *FileDataStream) GetDataNodeChain() []string {
	if x != nil {
		return x.DataNodeChain
	}
	return nil
}

type DataNodeRegisterArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataNodeAddress string `protobuf:"bytes,1,opt,name=dataNodeAddress,proto3" json:"dataNodeAddress,omitempty"`
	FreeSpace       uint64 `protobuf:"varint,2,opt,name=freeSpace,proto3" json:"freeSpace,omitempty"`
}

func (x *DataNodeRegisterArg) Reset() {
	*x = DataNodeRegisterArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNodeRegisterArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeRegisterArg) ProtoMessage() {}

func (x *DataNodeRegisterArg) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeRegisterArg.ProtoReflect.Descriptor instead.
func (*DataNodeRegisterArg) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{16}
}

func (x *DataNodeRegisterArg) GetDataNodeAddress() string {
	if x != nil {
		return x.DataNodeAddress
	}
	return ""
}

func (x *DataNodeRegisterArg) GetFreeSpace() uint64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

type DataNodeRegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *DataNodeRegisterReply) Reset() {
	*x = DataNodeRegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNodeRegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeRegisterReply) ProtoMessage() {}

func (x *DataNodeRegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeRegisterReply.ProtoReflect.Descriptor instead.
func (*DataNodeRegisterReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{17}
}

func (x *DataNodeRegisterReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DataNodeRegisterReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type ReplicaChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ReplicaChunkReply) Reset() {
	*x = ReplicaChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaChunkReply) ProtoMessage() {}

func (x *ReplicaChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaChunkReply.ProtoReflect.Descriptor instead.
func (*ReplicaChunkReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{18}
}

func (x *ReplicaChunkReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReplicaChunkReply) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type HeartBeatArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataNodeAddress string `protobuf:"bytes,1,opt,name=dataNodeAddress,proto3" json:"dataNodeAddress,omitempty"`
	FreeSpace       uint64 `protobuf:"varint,2,opt,name=freeSpace,proto3" json:"freeSpace,omitempty"`
}

func (x *HeartBeatArg) Reset() {
	*x = HeartBeatArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatArg) ProtoMessage() {}

func (x *HeartBeatArg) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatArg.ProtoReflect.Descriptor instead.
func (*HeartBeatArg) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{19}
}

func (x *HeartBeatArg) GetDataNodeAddress() string {
	if x != nil {
		return x.DataNodeAddress
	}
	return ""
}

func (x *HeartBeatArg) GetFreeSpace() uint64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

type HeartBeatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePathNames           []string `protobuf:"bytes,2,rep,name=filePathNames,proto3" json:"filePathNames,omitempty"`
	FilePathChunkNames      []string `protobuf:"bytes,3,rep,name=filePathChunkNames,proto3" json:"filePathChunkNames,omitempty"`
	NewChunkSevers          []string `protobuf:"bytes,4,rep,name=newChunkSevers,proto3" json:"newChunkSevers,omitempty"`
	TrashFilePathChunkNames []string `protobuf:"bytes,5,rep,name=trashFilePathChunkNames,proto3" json:"trashFilePathChunkNames,omitempty"`
}

func (x *HeartBeatReply) Reset() {
	*x = HeartBeatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatReply) ProtoMessage() {}

func (x *HeartBeatReply) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatReply.ProtoReflect.Descriptor instead.
func (*HeartBeatReply) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{20}
}

func (x *HeartBeatReply) GetFilePathNames() []string {
	if x != nil {
		return x.FilePathNames
	}
	return nil
}

func (x *HeartBeatReply) GetFilePathChunkNames() []string {
	if x != nil {
		return x.FilePathChunkNames
	}
	return nil
}

func (x *HeartBeatReply) GetNewChunkSevers() []string {
	if x != nil {
		return x.NewChunkSevers
	}
	return nil
}

func (x *HeartBeatReply) GetTrashFilePathChunkNames() []string {
	if x != nil {
		return x.TrashFilePathChunkNames
	}
	return nil
}

var File_model_proto protoreflect.FileDescriptor

var file_model_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a,
	0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x45, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xcf, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x50, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x4b, 0x44, 0x49, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x53, 0x54, 0x44, 0x49, 0x52, 0x10,
	0x05, 0x22, 0x75, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x78, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x66, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x41, 0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x22, 0x34, 0x0a, 0x0b, 0x44, 0x69, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x01, 0x0a,
	0x10, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x5d, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x56, 0x0a,
	0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x41, 0x72, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x74, 0x72, 0x61, 0x73, 0x68, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x2a, 0x42, 0x0a, 0x14, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x73, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x10, 0x01, 0x32, 0xa2, 0x03, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x1a, 0x0e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x1a, 0x11, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x1a, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x1a,
	0x0e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x31, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67,
	0x1a, 0x10, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x12, 0x11, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67,
	0x1a, 0x0c, 0x2e, 0x44, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x06, 0x52, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x1a, 0x0c, 0x2e, 0x52, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x79, 0x0a, 0x13, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x11, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x1a,
	0x0f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x30, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a,
	0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x28, 0x01, 0x32, 0x4c, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x1a,
	0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xea, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x67, 0x1a, 0x16, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x41, 0x72, 0x67, 0x1a, 0x0f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x67, 0x1a, 0x11, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32,
	0x45, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x0f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x1a, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x28, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_model_proto_rawDescOnce sync.Once
	file_model_proto_rawDescData = file_model_proto_rawDesc
)

func file_model_proto_rawDescGZIP() []byte {
	file_model_proto_rawDescOnce.Do(func() {
		file_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_proto_rawDescData)
	})
	return file_model_proto_rawDescData
}

var file_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_model_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_model_proto_goTypes = []interface{}{
	(ChunkReplicateStatus)(0),       // 0: ChunkReplicateStatus
	(FileOperationArg_Operation)(0), // 1: FileOperationArg.Operation
	(*ChunkReportReply)(nil),        // 2: ChunkReportReply
	(*ReNameReply)(nil),             // 3: ReNameReply
	(*DeleteFileReply)(nil),         // 4: DeleteFileReply
	(*FileOperationArg)(nil),        // 5: FileOperationArg
	(*CheckCommitChunkArg)(nil),     // 6: CheckCommitChunkArg
	(*CheckCommitChunkReply)(nil),   // 7: CheckCommitChunkReply
	(*CommitChunkArg)(nil),          // 8: CommitChunkArg
	(*CommitChunkReply)(nil),        // 9: CommitChunkReply
	(*ConfirmFileArg)(nil),          // 10: ConfirmFileArg
	(*ConfirmFileReply)(nil),        // 11: ConfirmFileReply
	(*FileMeta)(nil),                // 12: FileMeta
	(*DirMetaList)(nil),             // 13: DirMetaList
	(*FileLocationInfo)(nil),        // 14: FileLocationInfo
	(*ChunkInfo)(nil),               // 15: ChunkInfo
	(*DataNodeChain)(nil),           // 16: DataNodeChain
	(*FileDataStream)(nil),          // 17: FileDataStream
	(*DataNodeRegisterArg)(nil),     // 18: DataNodeRegisterArg
	(*DataNodeRegisterReply)(nil),   // 19: DataNodeRegisterReply
	(*ReplicaChunkReply)(nil),       // 20: ReplicaChunkReply
	(*HeartBeatArg)(nil),            // 21: HeartBeatArg
	(*HeartBeatReply)(nil),          // 22: HeartBeatReply
}
var file_model_proto_depIdxs = []int32{
	1,  // 0: FileOperationArg.operation:type_name -> FileOperationArg.Operation
	0,  // 1: CommitChunkArg.operation:type_name -> ChunkReplicateStatus
	14, // 2: ConfirmFileArg.fileLocationInfo:type_name -> FileLocationInfo
	12, // 3: DirMetaList.metaList:type_name -> FileMeta
	15, // 4: FileLocationInfo.chunks:type_name -> ChunkInfo
	16, // 5: ChunkInfo.dataNodeAddress:type_name -> DataNodeChain
	0,  // 6: FileDataStream.operation:type_name -> ChunkReplicateStatus
	5,  // 7: ClientToNameService.PutFile:input_type -> FileOperationArg
	10, // 8: ClientToNameService.ConfirmFile:input_type -> ConfirmFileArg
	5,  // 9: ClientToNameService.GetFile:input_type -> FileOperationArg
	5,  // 10: ClientToNameService.GetFileLocation:input_type -> FileOperationArg
	5,  // 11: ClientToNameService.GetFileStoreChain:input_type -> FileOperationArg
	5,  // 12: ClientToNameService.DeleteFile:input_type -> FileOperationArg
	5,  // 13: ClientToNameService.ListDir:input_type -> FileOperationArg
	5,  // 14: ClientToNameService.ReName:input_type -> FileOperationArg
	5,  // 15: ClientToDataService.GetChunk:input_type -> FileOperationArg
	17, // 16: ClientToDataService.PutChunk:input_type -> FileDataStream
	5,  // 17: NameToDataService.GetDataNodeInfo:input_type -> FileOperationArg
	18, // 18: DataToNameService.RegisterDataNode:input_type -> DataNodeRegisterArg
	21, // 19: DataToNameService.HeartBeat:input_type -> HeartBeatArg
	14, // 20: DataToNameService.ChunkReport:input_type -> FileLocationInfo
	8,  // 21: DataToNameService.CommitChunk:input_type -> CommitChunkArg
	17, // 22: DataToDataService.PutChunk:input_type -> FileDataStream
	16, // 23: ClientToNameService.PutFile:output_type -> DataNodeChain
	11, // 24: ClientToNameService.ConfirmFile:output_type -> ConfirmFileReply
	14, // 25: ClientToNameService.GetFile:output_type -> FileLocationInfo
	14, // 26: ClientToNameService.GetFileLocation:output_type -> FileLocationInfo
	16, // 27: ClientToNameService.GetFileStoreChain:output_type -> DataNodeChain
	4,  // 28: ClientToNameService.DeleteFile:output_type -> DeleteFileReply
	13, // 29: ClientToNameService.ListDir:output_type -> DirMetaList
	3,  // 30: ClientToNameService.ReName:output_type -> ReNameReply
	17, // 31: ClientToDataService.GetChunk:output_type -> FileDataStream
	14, // 32: ClientToDataService.PutChunk:output_type -> FileLocationInfo
	14, // 33: NameToDataService.GetDataNodeInfo:output_type -> FileLocationInfo
	19, // 34: DataToNameService.RegisterDataNode:output_type -> DataNodeRegisterReply
	22, // 35: DataToNameService.HeartBeat:output_type -> HeartBeatReply
	2,  // 36: DataToNameService.ChunkReport:output_type -> ChunkReportReply
	9,  // 37: DataToNameService.CommitChunk:output_type -> CommitChunkReply
	14, // 38: DataToDataService.PutChunk:output_type -> FileLocationInfo
	23, // [23:39] is the sub-list for method output_type
	7,  // [7:23] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_model_proto_init() }
func file_model_proto_init() {
	if File_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOperationArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitChunkArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitChunkArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmFileArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirMetaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNodeChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDataStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNodeRegisterArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNodeRegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_model_proto_goTypes,
		DependencyIndexes: file_model_proto_depIdxs,
		EnumInfos:         file_model_proto_enumTypes,
		MessageInfos:      file_model_proto_msgTypes,
	}.Build()
	File_model_proto = out.File
	file_model_proto_rawDesc = nil
	file_model_proto_goTypes = nil
	file_model_proto_depIdxs = nil
}
